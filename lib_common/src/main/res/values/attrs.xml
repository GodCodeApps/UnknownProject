<resources>


    <declare-styleable name="CenterTitleToolbar">
        <attr name="navigationIconColor" format="integer">
            <enum name="black" value="0" />
            <enum name="white" value="1" />
        </attr>
    </declare-styleable>

    <!-- require boolean value to decide whether requestFocus for view. -->
    <attr name="requestFocus" format="boolean" />
    <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
    <attr name="itemView" format="reference" />
    <!-- require List<ViewModel> bind to ItemView to presentation.-->
    <attr name="items" format="reference" />
    <!-- require a adapter which type of BindingRecyclerViewAdapter<T> to AdapterView-->
    <attr name="adapter" format="reference" />

    <attr name="onScrollChangeCommand" format="reference" />
    <attr name="onScrollStateChangedCommand" format="reference" />
    <attr name="url" format="string" />
    <attr name="onTouchCommand" format="reference" />

    <!-- require BindingCommand {@link com.kelin.mvvmlight.command.BindingCommand } to deal with view click event. -->
    <attr name="onClickCommand" format="reference" />
    <attr name="onLongClickCommand" format="reference" />
    <!-- require BindingCommand<Boolean> {@link com.kelin.mvvmlight.command.BindingCommand } to deal with view focus change event.
     BindingCommand would has params which means if view hasFocus.-->
    <attr name="onFocusChangeCommand" format="reference" />
    <attr name="isThrottleFirst" format="boolean" />
    <attr name="currentView" format="reference" />
    <!-- require boolean value to decide whether requestFocus for view. -->
    <declare-styleable name="View">
        <!-- require BindingCommand {@link com.kelin.mvvmlight.command.BindingCommand } to deal with view click event. -->
        <attr name="onClickCommand" />
        <attr name="onLongClickCommand" />
        <!-- require BindingCommand<Boolean> {@link com.kelin.mvvmlight.command.BindingCommand } to deal with view focus change event.
         BindingCommand would has params which means if view hasFocus.-->
        <attr name="onFocusChangeCommand" />
        <!-- require BindingCommand<MotionEvent> -->
        <attr name="onTouchCommand" />
        <attr name="isThrottleFirst" />
        <attr name="currentView" />

    </declare-styleable>


    <declare-styleable name="AdapterView">
        <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
        <attr name="itemView" />
        <!-- require List<ViewModel> bind to ItemView to presentation.-->
        <attr name="items" />
        <!-- require a adapter which type of BindingRecyclerViewAdapter<T> to AdapterView-->
        <attr name="adapter" />
        <attr name="dropDownItemView" format="reference" />
        <attr name="itemIds" format="reference" />
        <attr name="itemIsEnabled" format="reference" />
        <!-- require BindingCommand<Integer> -->
        <attr name="onScrollStateChangedCommand" />
        <!-- require BindingCommand<ListViewScrollDataWrapper> -->
        <attr name="onScrollChangeCommand" />
        <!-- require BindingCommand<Integer> count of list items-->
        <attr name="onLoadMoreCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="TextView">
        <!--require BindingCommand<TextChangeDataWrapper> -->
        <attr name="beforeTextChangedCommand" format="reference" />
        <!--require BindingCommand<TextChangeDataWrapper> -->
        <attr name="onTextChangedCommand" format="reference" />
        <!--require BindingCommand<String> -->
        <attr name="afterTextChangedCommand" format="reference" />
        <attr name="textChanged" format="reference" />
    </declare-styleable>


    <declare-styleable name="ImageView">
        <!--  load bitmap from uri(string type) -->
        <attr name="url" />
        <!--width for ResizeOptions (use Fresco to load bitmap). -->
        <attr name="request_width" format="integer" />
        <!--height for ResizeOptions (use Fresco to load bitmap). -->
        <attr name="request_height" format="integer" />
        <attr name="placeholderRes" format="reference|color" />
        <!--  require BindingCommand<Bitmap> See {@link @link com.kelin.mvvmlight.command.BindingCommand} -->
        <attr name="onSuccessCommand" format="reference" />
        <!--require BindingCommand<CloseableReference<CloseableImage>> See {@link com.kelin.mvvmlight.command.BindingCommand} -->
        <attr name="onFailureCommand" format="reference" />

    </declare-styleable>


    <declare-styleable name="ViewGroup">
        <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
        <attr name="itemView" />
        <!-- require List<ViewModel> bind to ItemView to presentation.-->
        <attr name="observableList" format="reference" />

    </declare-styleable>

    <declare-styleable name="RecyclerView" parent="AdapterView">
        <attr name="lineManager" format="reference" />
    </declare-styleable>
    <declare-styleable name="RadioGroup">
        <attr name="onCheckedChangedCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="Spinner">
        <attr name="itemDatas" format="reference" />
        <attr name="valueReply" format="string" />
        <attr name="onItemSelectedCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="Switch">
        <attr name="onCheckedChangeCommand" format="reference" />
        <attr name="switchState" format="boolean" />
    </declare-styleable>

    <declare-styleable name="ListView" parent="AdapterView">
        <!--require BindingCommand<Integer> integer mean to position where is clicked! -->
        <attr name="onItemClickCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="ViewPager">
        <!-- require ItemView {@link me.tatarka.bindingcollectionadapter.ItemView} or ItemViewSelector {{@link me.tatarka.bindingcollectionadapter.ItemViewSelector}.} -->
        <attr name="itemView" />
        <!-- require List<ViewModel> bind to ItemView to presentation.-->
        <attr name="items" />
        <!-- require a adapter which type of BindingRecyclerViewAdapter<T> to AdapterView-->
        <attr name="adapter" />
        <!-- require PageTitles<T>-->
        <attr name="pageTitles" format="reference" />
        <!--require BindingCommand<ViewPagerDataWrapper> -->
        <attr name="onPageScrolledCommand" format="reference" />
        <!--require BindingCommand<Integer> -->
        <attr name="onPageSelectedCommand" format="reference" />
        <!--require BindingCommand<Integer> -->
        <attr name="onPageScrollStateChangedCommand" format="reference" />

    </declare-styleable>

    <declare-styleable name="NestedScrollView">
        <!-- require BindingCommand<NestScrollDataWrapper> -->
        <attr name="onScrollChangeCommand" />
    </declare-styleable>

    <declare-styleable name="SimpleDraweeView">
        <!-- require String to load Image"-->
        <attr name="url" />
    </declare-styleable>

    <declare-styleable name="ScrollView">
        <!-- require BindingCommand<ScrollDataWrapper> -->
        <attr name="onScrollChangeCommand" />
    </declare-styleable>

    <declare-styleable name="SwipeRefreshLayout">
        <!-- require RelayCommand -->
        <attr name="onRefreshCommand" format="reference" />
    </declare-styleable>

    <declare-styleable name="WebView">
        <!-- require String render to html show in webview-->
        <attr name="render" format="string" />
    </declare-styleable>
    <!-- 自定义控制事件分发的LinearLayout -->
    <declare-styleable name="ControlDistributeLinearLayout">
        <attr name="distribute_event" format="boolean" />
    </declare-styleable>

    <declare-styleable name="CircleImageView">
        <attr name="civ_border_width" format="dimension" />
        <attr name="civ_border_color" format="color" />
        <attr name="civ_border_overlay" format="boolean" />
        <attr name="civ_fill_color" format="color" />
        <attr name="civ_border_padding" format="boolean" />
        <attr name="civ_circle_background_color" format="color" />
    </declare-styleable>

    <declare-styleable name="ActionSheet">
        <attr name="actionSheetBackground" format="color|reference" />
        <attr name="cancelButtonBackground" format="color|reference" />
        <attr name="otherButtonTopBackground" format="color|reference" />
        <attr name="otherButtonMiddleBackground" format="color|reference" />
        <attr name="otherButtonBottomBackground" format="color|reference" />
        <attr name="otherButtonSingleBackground" format="color|reference" />
        <attr name="cancelButtonTextColor" format="color|reference" />
        <attr name="otherButtonTextColor" format="color|reference" />
        <attr name="actionSheetPadding" format="dimension|reference" />
        <attr name="otherButtonSpacing" format="dimension|reference" />
        <attr name="cancelButtonMarginTop" format="dimension|reference" />
        <attr name="actionSheetTextSize" format="dimension|reference" />
        <attr name="actionSheetStyle" format="reference" />
    </declare-styleable>


    <!--自定义属性 -->
    <declare-styleable name="ClipViewLayout">
        <attr name="clipType" format="enum">
            <enum name="circle" value="1" />
            <enum name="rectangle" value="2" />
        </attr>
        <attr name="mHorizontalPadding" format="dimension" />
        <attr name="clipBorderWidth" format="dimension" />
    </declare-styleable>
    <declare-styleable name="ucrop_UCropView">

        <!--Crop image view-->
        <attr name="ucrop_aspect_ratio_x" format="float" />
        <attr name="ucrop_aspect_ratio_y" format="float" />
        <!--Overlay view-->
        <attr name="ucrop_show_oval_crop_frame" format="boolean" />
        <attr name="ucrop_oval_dimmed_layer" format="boolean" />
        <attr name="ucrop_dimmed_color" format="color" />

        <attr name="ucrop_grid_stroke_size" format="dimension" />
        <attr name="ucrop_grid_color" format="color" />
        <attr name="ucrop_grid_row_count" format="integer" />
        <attr name="ucrop_grid_column_count" format="integer" />
        <attr name="ucrop_show_grid" format="boolean" />

        <attr name="ucrop_frame_stroke_size" format="dimension" />
        <attr name="ucrop_frame_color" format="color" />
        <attr name="ucrop_show_frame" format="boolean" />
    </declare-styleable>

    <integer-array name="colorScheme">
        <!--<item>@android:color/holo_red_light</item>-->
        <item>@android:color/holo_orange_light</item>
        <!--<item>@android:color/holo_green_light</item>-->
        <!--<item>@android:color/holo_blue_light</item>-->
        <!--<item>@android:color/holo_purple</item>-->
    </integer-array>

    <declare-styleable name="NineGridView">
        <attr name="ngv_singleImageSize" format="dimension" />
        <attr name="ngv_singleImageRatio" format="float" />
        <attr name="ngv_gridSpacing" format="dimension" />
        <attr name="ngv_maxSize" format="integer" />
        <attr name="ngv_mode" format="enum">
            <enum name="fill" value="0" />
            <enum name="grid" value="1" />
        </attr>
    </declare-styleable>

    <declare-styleable name="custom_banner">
        <attr name="indicatorGravity" format="enum">
            <enum name="LEFT" value="1"/>
            <enum name="RIGHT" value="2"/>
            <enum name="CENTER" value="3"/>
        </attr>
        <attr name="indicatorStyle" format="enum">
            <enum name="NONE" value="1"/>
            <enum name="NUMBER" value="2"/>
            <enum name="ORDINARY" value="3"/>
        </attr>
        <attr name="indicatorSelectRes" format="reference"/>
        <attr name="indicatorUnSelectRes" format="reference"/>
        <attr name="indicatorInterval" format="dimension"/>
    </declare-styleable>

    <declare-styleable name="ExpandTextView">
        <attr name="showMaxLine" format="integer" />
        <attr name="tipGravity" format="integer" />
        <attr name="tipColor" format="reference|color" />
        <attr name="tipClickable" format="boolean" />
        <attr name="foldText" format="string" />
        <attr name="expandText" format="string" />
        <attr name="showTipAfterExpand" format="boolean" />
        <attr name="isSetParentClick" format="boolean" />
    </declare-styleable>
    <declare-styleable name="CustomCounterView">
        <attr name="mMaxCount" format="integer" />
    </declare-styleable>
</resources>